#!/usr/bin/env ruby
############################################################################
begin
  require 'optparse'
  require 'logger'

  logger = Logger.new(STDERR)
  logger.progname = File.basename($0)
  logger.formatter = proc do |severity, datetime, progname, msg|
    "[#{datetime.utc.iso8601}] #{severity} #{progname} - #{msg}\n"
  end
  logger.level = Logger::WARN

  options = {
    option: false,
    value: ENV['CMDRUBY_VALUE'] || 'default',
  }
  OptionParser.new do |opts|
    opts.banner = %{
usage: cmdruby [options] NAMED_ARG VARIABLE_ARGS...

  A shell-friendly command in ruby.

examples:

  ./bin/cmdruby -h
  ./bin/cmdruby abc
  ./bin/cmdruby abc x y z
  ./bin/cmdruby abc x y z -v override
  ./bin/cmdruby -v override abc x y z -o
  ./bin/cmdruby -v override abc x y z -o -h

  export CMDRUBY_VALUE=override
  ./bin/cmdruby abc x y z

  ./bin/cmdruby
  ./bin/cmdruby -x

options:

}.lstrip

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      exit
    end

    opts.on("-o", "--[no-]option", "option (#{options[:option]})") do |input|
      options[:option] = input
    end

    opts.on("-v", "--value VALUE", "option with a value (#{options[:value]})") do |input|
      options[:value] = input
    end

  end.parse!

  if ARGV.length < 1
    STDERR.puts "no NAMED_ARG specified"
    exit 1
  end

  ############################################################################
  def write_output(key, value)
    puts "%-15s %s\n" % [key, value]
  end
  ############################################################################
  named_arg, *args = ARGV.dup; ARGV.clear

  write_output "option", options[:option]
  write_output "value", options[:value]
  write_output "named_arg", named_arg
  args.each do |variable_arg|
    write_output "variable_arg", variable_arg
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
rescue StandardError
  raise if $DEBUG
  warn $!.message
  exit 1
end
